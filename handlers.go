package main

import (
	"fmt"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func handleUpdate(bot *tgbotapi.BotAPI, update tgbotapi.Update, keyboard tgbotapi.ReplyKeyboardMarkup) {
	if update.Message == nil {
		return
	}

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")
	text := update.Message.Text
	userID := update.Message.From.ID
	currentDate := time.Now().Format("02/01/06")

	switch text {
	case "/start":
		msg.Text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá"
		msg.ReplyMarkup = keyboard

	case "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥":
		msg.Text = "–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —Å—É–º–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è\n–ù–∞–ø—Ä–∏–º–µ—Ä: `250 –µ–¥–∞`"
		msg.ParseMode = "Markdown"

	case "üí∞ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã":
		total, err := GetTodayTotal(userID)
		if err != nil {
			msg.Text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ"
		} else {
			msg.Text = fmt.Sprintf("–°–µ–≥–æ–¥–Ω—è –≤—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏: %.2f —Å–æ–º–æ–Ω”£.", total)
		}

	case "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
		stats, err := GetWeeklyStats(userID)
		if err != nil || len(stats) == 0 {
			msg.Text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."
			break
		}
		filePath := "stats.png"
		if err := CreateStatsChart(stats, filePath); err != nil {
			msg.Text = "–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞."
			break
		}
		photo := tgbotapi.NewPhoto(update.Message.Chat.ID, tgbotapi.FilePath(filePath))
		photo.Caption = "üìä –í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ 7 –¥–Ω–µ–π"
		bot.Send(photo)
		return

	case "üí± –ö—É—Ä—Å –≤–∞–ª—é—Ç":
		rates, err := GetExchangeRatesFromXML()
		ratesMap := make(map[string]float64)
		pairs := strings.Split(rates, ",")
		for _, pair := range pairs {
			// –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ ":"
			parts := strings.Split(strings.TrimSpace(pair), ":")
			if len(parts) == 2 {
				code := strings.TrimSpace(parts[0])
				valueStr := strings.TrimSpace(parts[1])
				value, err := strconv.ParseFloat(valueStr, 64)
				if err != nil {
					fmt.Println("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–∏—Å–ª–∞:", err)
					continue
				}
				ratesMap[code] = value
			}
		}
		if err != nil {
			msg.Text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç."
		} else {
			msg.Text = fmt.Sprintf("–ö—É—Ä—Å –ù–ë–¢ –Ω–∞ –¥–∞—Ç—É %s", currentDate)
			msg.Text = fmt.Sprintf(
				"–ö—É—Ä—Å –ù–ë–¢ –Ω–∞ –¥–∞—Ç—É %s\n"+
					"üá∫üá∏ USD: %.4f\n"+
					"üá∑üá∫ RUB: %.4f\n"+
					"üá™üá∫ EUR: %.4f\n"+
					"üá®üá≥ CNY: %.4f",
				currentDate,
				ratesMap["USD"],
				ratesMap["RUB"],
				ratesMap["EUR"],
				ratesMap["CNY"],
			)
		}

	default:
		// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–Ω—è—Ç—å, —ç—Ç–æ –ª–∏ —Ä–∞—Å—Ö–æ–¥: —Å—É–º–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
		parts := strings.Fields(text)
		if len(parts) == 2 {
			amount, err := strconv.ParseFloat(parts[0], 64)
			if err == nil {
				category := parts[1]
				err := AddExpense(userID, amount, category)
				if err != nil {
					msg.Text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞"
				} else {
					msg.Text = fmt.Sprintf("–î–æ–±–∞–≤–ª–µ–Ω–æ %.2f –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '%s'", amount, category)
				}
			} else {
				msg.Text = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 200 –µ–¥–∞"
			}
		} else {
			msg.Text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é üëá"
		}
	}

	bot.Send(msg)
}
