package main

import (
	"fmt"
	"log"
	"os"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/shirou/gopsutil/v3/process"
)

func main() {
	err := InitDB()
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã:", err)
	}

	bot, err := tgbotapi.NewBotAPI(TelegramBotToken)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Telegram:", err)
	}

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–∏—Å—à–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go monitorProcesses()

	//menu := tgbotapi.NewMessage(0, "–ú–µ–Ω—é")
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"),
			tgbotapi.NewKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
			tgbotapi.NewKeyboardButton("üå¶Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üí∞ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã"),
			tgbotapi.NewKeyboardButton("üí± –ö—É—Ä—Å –≤–∞–ª—é—Ç"),
		),
	)

	for update := range updates {
		go handleUpdate(bot, update, keyboard)
	}
}

// –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
func monitorProcesses() {
	fmt.Println("–°—Ç–∞—Ä—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")

	selfPID := int32(os.Getpid())
	fmt.Printf("üë§ –¢–µ–∫—É—â–∏–π PID: %d\n", selfPID)

	processes, err := process.Processes()
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:", err)
		return
	}

	fmt.Printf("–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: %d\n", len(processes))

	for _, p := range processes {

		ramSize, err := p.MemoryInfo()
		if err == nil && ramSize != nil {
			fmt.Printf("RSS: %d –±–∞–π—Ç (%.2f –ú–ë)\n", ramSize.RSS, float64(ramSize.RSS)/1024/1024)
		} else {
			if strings.Contains(err.Error(), "Access is denied") {
				fmt.Printf("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ PID %d. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.\n", p.Pid)
				return
			} else {
				fmt.Println("–û—à–∏–±–∫–∞ MemoryInfo():", err)
			}
		}

		cpuPercent, err := p.CPUPercent()
		if err == nil {
			fmt.Printf("CPU: %.2f%%\n", cpuPercent)
		} else {
			if strings.Contains(err.Error(), "Access is denied") {
				fmt.Printf("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ CPU –ø—Ä–æ—Ü–µ—Å—Å—É PID %d. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.\n", p.Pid)
				return
			} else {
				fmt.Println("‚ùå –û—à–∏–±–∫–∞ CPUPercent():", err)
			}
		}

		isRunning, err := p.IsRunning()
		if err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ IsRunning():", err)
			if strings.Contains(err.Error(), "Access is denied") {
				fmt.Println("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ. –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ —Å–∏—Å—Ç–µ–º–Ω—ã–π –∏–ª–∏ –∑–∞—â–∏—â—ë–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å.")
			}
		} else {
			fmt.Println("–ü—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–µ–Ω:", isRunning)
		}

		name, err := p.Name()
		if err != nil {
			name = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
		}

		if p.Pid != selfPID {
			continue
		}

		const epsilon = 0.000001
		if cpuPercent < epsilon || !isRunning {
			if p != nil {
				p.Kill()
			}
		}

		fmt.Printf("–ù–∞—à–ª–∏ –ë–û–¢-–∞ PID: %d, Name: %s, RAM: %s, isRunning: %v\n", p.Pid, name, ramSize, isRunning)
		fmt.Printf("PID: %d, Name: %s\n", p.Pid, name)
	}
}
