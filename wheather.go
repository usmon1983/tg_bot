package main

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"

	"github.com/joho/godotenv"
)

func GetWheatherFromJSON(city string)  string{
	lang := "ru"
	fmt.Println(city)
	q := city
	
	err := godotenv.Load()
    if err != nil {
        log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞")
    }

	apiWheatherKey := os.Getenv("WHEATHER_API_KEY")
	urlApiWheather := fmt.Sprintf("https://api.weatherapi.com/v1/current.json?key=%s&q=%s&lang=%s", apiWheatherKey, q, lang)
    resp, err := http.Get(urlApiWheather)
	if err != nil {
        log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", err)
    }
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
    if err != nil {
        log.Fatal("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞:", err)
    }

    // –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–º–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å)
    var data struct {
        Location struct {
            Name string `json:"name"`
        } `json:"location"`
        Current struct {
            TempC     float64 `json:"temp_c"`
            Condition struct {
                Text string `json:"text"`
            } `json:"condition"`
        } `json:"current"`
    }

    err = json.Unmarshal(body, &data)
    if err != nil {
        log.Fatal("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", err)
    }

    result := fmt.Sprintf("üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ %s: %s, %.1f¬∞C",
        data.Location.Name, data.Current.Condition.Text, data.Current.TempC)

    return result
}